
/*! XLSXLite v0.1 â€” minimal XLSX writer (single sheet) with no compression (STORE).
    Use when CDN SheetJS (XLSX) is unavailable. Public domain / CC0. */
(function(){
  if (window.XLSXLite) return;

  // ---- utils ----
  function strToUint8(str){
    var out = new Uint8Array(str.length);
    for (var i=0;i<str.length;i++) out[i] = str.charCodeAt(i) & 0xFF;
    return out;
  }
  function strToUTF8(str){
    // simple UTF-8 encoder
    var utf8 = [];
    for (var i=0;i<str.length;i++){
      var c = str.charCodeAt(i);
      if (c < 0x80) utf8.push(c);
      else if (c < 0x800) { utf8.push(0xC0 | (c>>6), 0x80 | (c & 0x3F)); }
      else if (c >= 0xD800 && c <= 0xDBFF) { // surrogate pair
        var c2 = str.charCodeAt(++i);
        var code = 0x10000 + (((c & 0x3FF)<<10) | (c2 & 0x3FF));
        utf8.push(0xF0 | (code>>18), 0x80 | ((code>>12)&0x3F), 0x80 | ((code>>6)&0x3F), 0x80 | (code&0x3F));
      } else {
        utf8.push(0xE0 | (c>>12), 0x80 | ((c>>6)&0x3F), 0x80 | (c&0x3F));
      }
    }
    return new Uint8Array(utf8);
  }
  // CRC32
  var CRC_TABLE = (function(){
    var c, table = [];
    for (var n=0; n<256; n++){
      c = n;
      for (var k=0; k<8; k++){
        c = (c & 1) ? (0xEDB88320 ^ (c>>>1)) : (c>>>1);
      }
      table[n] = c>>>0;
    }
    return table;
  })();
  function crc32(u8){
    var crc = 0 ^ (-1);
    for (var i=0;i<u8.length;i++){
      crc = (crc >>> 8) ^ CRC_TABLE[(crc ^ u8[i]) & 0xFF];
    }
    return (crc ^ (-1)) >>> 0;
  }
  function uint32LE(n){
    return new Uint8Array([n & 0xFF, (n>>>8)&0xFF, (n>>>16)&0xFF, (n>>>24)&0xFF]);
  }
  function uint16LE(n){
    return new Uint8Array([n & 0xFF, (n>>>8)&0xFF]);
  }

  // ---- simple ZIP (STORE) ----
  function ZipBuilder(){
    this.parts = [];
    this.offset = 0;
  }
  ZipBuilder.prototype.add = function(path, dataU8){
    var nameU8 = strToUint8(path);
    var crc = crc32(dataU8);
    var size = dataU8.length;

    // local header
    var local = [];
    local.push(strToUint8("PK\u0003\u0004")); // signature
    local.push(uint16LE(20)); // version needed
    local.push(uint16LE(0));  // flags
    local.push(uint16LE(0));  // method store
    local.push(uint16LE(0));  // time
    local.push(uint16LE(0));  // date
    local.push(uint32LE(crc));
    local.push(uint32LE(size)); // comp size
    local.push(uint32LE(size)); // uncomp size
    local.push(uint16LE(nameU8.length));
    local.push(uint16LE(0)); // extra len
    local.push(nameU8);
    var localHeader = concat(local);

    var localOffset = this.offset;
    this.parts.push(localHeader);
    this.parts.push(dataU8);
    this.offset += localHeader.length + dataU8.length;

    // central directory
    var central = [];
    central.push(strToUint8("PK\u0001\u0002"));
    central.push(uint16LE(20)); // version made by
    central.push(uint16LE(20)); // version needed
    central.push(uint16LE(0));  // flags
    central.push(uint16LE(0));  // store
    central.push(uint16LE(0));  // time
    central.push(uint16LE(0));  // date
    central.push(uint32LE(crc));
    central.push(uint32LE(size));
    central.push(uint32LE(size));
    central.push(uint16LE(nameU8.length));
    central.push(uint16LE(0)); // extra len
    central.push(uint16LE(0)); // comment len
    central.push(uint16LE(0)); // disk start
    central.push(uint16LE(0)); // int attr
    central.push(uint32LE(0)); // ext attr
    central.push(uint32LE(localOffset));
    central.push(nameU8);
    var cd = concat(central);
    this.central = this.central || [];
    this.central.push(cd);
  };
  function concat(arr){
    var len = 0;
    for (var i=0;i<arr.length;i++) len += arr[i].length;
    var out = new Uint8Array(len);
    var off = 0;
    for (var i=0;i<arr.length;i++){
      out.set(arr[i], off); off += arr[i].length;
    }
    return out;
  }
  ZipBuilder.prototype.finish = function(){
    var centralDir = concat(this.central || []);
    var cdOffset = this.offset;
    var cdSize = centralDir.length;

    var eocd = [];
    eocd.push(strToUint8("PK\u0005\u0006"));
    eocd.push(uint16LE(0)); // disk
    eocd.push(uint16LE(0)); // start disk
    var entries = (this.central||[]).length;
    eocd.push(uint16LE(entries));
    eocd.push(uint16LE(entries));
    eocd.push(uint32LE(cdSize));
    eocd.push(uint32LE(cdOffset));
    eocd.push(uint16LE(0)); // comment len
    var eocdU8 = concat(eocd);

    var all = concat(this.parts.concat([centralDir, eocdU8]));
    return new Blob([all], {type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'});
  };

  // ---- XLSX writer (single sheet) ----
  function colLetter(n){
    var s = ""; n = n + 1;
    while(n>0){ var m = (n-1)%26; s = String.fromCharCode(65+m)+s; n = Math.floor((n-1)/26); }
    return s;
  }
  function escXml(s){
    return String(s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
  }
  function buildSheetXML(rows){
    var maxR = rows.length;
    var maxC = rows.reduce(function(m, r){ return Math.max(m, (r?Object.keys(r).length:0)); }, 0);
    // headers from first row keys
    var headers = Object.keys(rows[0]||{});
    var cols = headers.length;
    var ref = "A1:" + colLetter(cols-1) + (rows.length+1);

    var parts = [];
    parts.push('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>');
    parts.push('<worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">');
    parts.push('<sheetData>');

    // header row
    parts.push('<row r="1">');
    for (var c=0;c<cols;c++){
      var addr = colLetter(c) + "1";
      parts.push('<c r="'+addr+'" t="inlineStr"><is><t>'+escXml(headers[c])+'</t></is></c>');
    }
    parts.push('</row>');

    // data rows
    for (var r=0;r<rows.length;r++){
      var row = rows[r] || {};
      parts.push('<row r="'+(r+2)+'">');
      for (var c=0;c<cols;c++){
        var key = headers[c];
        var v = row[key];
        var addr = colLetter(c) + (r+2);
        if (v===undefined || v===null || v===''){
          parts.push('<c r="'+addr+'"/>');
        } else if (typeof v === 'number'){
          parts.push('<c r="'+addr+'"><v>'+v+'</v></c>');
        } else {
          parts.push('<c r="'+addr+'" t="inlineStr"><is><t>'+escXml(v)+'</t></is></c>');
        }
      }
      parts.push('</row>');
    }

    parts.push('</sheetData>');
    parts.push('</worksheet>');
    return parts.join('');
  }

  function buildWorkbookXML(){
    return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' +
      '<workbook xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" ' +
      ' xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships">' +
      '<sheets><sheet name="Kasus" sheetId="1" r:id="rId1"/></sheets></workbook>';
  }
  function buildWorkbookRels(){
    return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' +
    '<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">' +
    '<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Target="worksheets/sheet1.xml"/>' +
    '</Relationships>';
  }
  function buildRels(){
    return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' +
    '<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">' +
    '<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="/xl/workbook.xml"/>' +
    '</Relationships>';
  }
  function buildContentTypes(){
    return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' +
    '<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">' +
    '<Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>' +
    '<Default Extension="xml" ContentType="application/xml"/>' +
    '<Override PartName="/xl/workbook.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml"/>' +
    '<Override PartName="/xl/worksheets/sheet1.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml"/>' +
    '</Types>';
  }

  function writeFile(rows, filename){
    rows = rows || [];
    filename = filename || 'leptospirosis_cases.xlsx';
    var zip = new ZipBuilder();
    zip.add('[Content_Types].xml', strToUTF8(buildContentTypes()));
    zip.add('_rels/.rels', strToUTF8(buildRels()));
    zip.add('xl/workbook.xml', strToUTF8(buildWorkbookXML()));
    zip.add('xl/_rels/workbook.xml.rels', strToUTF8(buildWorkbookRels()));
    zip.add('xl/worksheets/sheet1.xml', strToUTF8(buildSheetXML(rows)));
    var blob = zip.finish();

    var a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    a.download = filename;
    document.body.appendChild(a); a.click(); a.remove();
  }

  window.XLSXLite = { writeFile: writeFile };
})();
